
@page "/weather"

@inject IHttpClientFactory _clientFactory 
<h3>Weather Data</h3>

@if( string.IsNullOrWhiteSpace(errorString) == false)
{
    <div class="h2">@errorString</div>
}
else if (forecast is  null)
{
    <div class="h4">  Loading....</div>
}
else
 { 
    <table class="table table-striped">
        <thead class="thead-dark">
            <tr>
                <th> Date</th>
                <th> Weather State</th>
                <th> Low</th>
                <th> High</th>
            </tr>
            
            
        </thead>
        <tbody>
            @foreach (var w in forecast.consolidated_weather )
            {
            <tr>
                <td> @w.Applicable_date</td>
                <td> @w.Applicable_date</td>
                <td> @w.Applicable_date</td>
                <td> @w.Applicable_date</td>
            </tr>

            }
        </tbody>
    </table>

}


@code {   
    WeatherForecastModel forecast;
    string errorString;

    protected override async Task OnInitializedAsync()
    {
        // return base.OnInitializedAsync();

        //var request = new HttpRequestMessage(HttpMethod.Get, "https://www.metaweather.com/api/location/784794/");
        //var client = _clientFactory.CreateClient();
        //HttpResponseMessage response = await client.SendAsync(request);

        //if (response.IsSuccessStatusCode)
        //{
        //    forecast = await response.Content.ReadFromJsonAsync<WeatherForecastModel>();
        //    errorString = null;

        //}
        //else
        //{
        //    errorString = $"error: { response.ReasonPhrase}";
        //}

        var client = _clientFactory.CreateClient("meta");
        try
        {
            forecast = await client.GetFromJsonAsync<WeatherForecastModel>("location/784794/");
            errorString = null;
        }
        catch (Exception ex)
        {
            errorString = $"error: { ex.Message}";
        }
    }

}
